services:
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: github_spam
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:4
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy

  api:
    build:
      context: ..
      dockerfile: Dockerfile
    image: gh-spam-lab:latest
    env_file: .env
    environment:
      DATABASE__URL: postgres://postgres:postgres@postgres:5432/github_spam
      API__BIND: 0.0.0.0:3000
    ports:
      - "3000:3000"
    volumes:
      - ../config:/srv/app/config:ro
      - ../scripts:/srv/app/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy

  collector:
    image: gh-spam-lab:latest
    env_file: .env
    environment:
      DATABASE__URL: postgres://postgres:postgres@postgres:5432/github_spam
    command: ["/usr/local/bin/collector"]
    ports:
      - "9091:9091"
    volumes:
      - ../config:/srv/app/config:ro
      - ../scripts:/srv/app/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:v2.48.0
    volumes:
      - ./obs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      collector:
        condition: service_started

  grafana:
    image: grafana/grafana:10.2.0
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3100:3000"
    volumes:
      - ./obs/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./obs/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./obs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_started

volumes:
  postgres_data:
